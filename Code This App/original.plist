<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<array>
	<dict>
		<key>code</key>
		<string>var name;

printArray([
	&quot;Hello there!&quot;,
	&quot;Welcome to Code this App. I&apos;m Codie, your coding teacher.&quot;,
	&quot;What&apos;s your name?&quot;,
], function() {
	readline(&quot;Enter your name, and press &apos;Enter&apos;:&quot;, function(nameGiven) {
		name = nameGiven
		console.log(&quot;Nice to meet you, &quot; + name + &quot;!&quot;)
		console.log(&quot;Try typing &apos;console.log(\&quot;&quot; + name + &quot;\&quot;)&apos;, and then press the run button.&quot;)
		verifyOutput(name, &quot;Not quite! Did you run the correct code?&quot;, finishStepOne)
	})

});

function finishStepOne() {
	console.log(&quot;Nice job! You&apos;ll be a master programmer in no time.&quot;)
	console.log(&quot;Try printing out another message between the quotes. When you&apos;re done, return to the menu and go onto the next lesson!&quot;)
}</string>
		<key>name</key>
		<string>Introduction</string>
	</dict>
	<dict>
		<key>code</key>
		<string>printArray([
	&quot;Congrats on completing your first lesson!&quot;,
	&quot;Today, we&apos;re going to take a look at variables.&quot;,
	&quot;They can be used to store anything, like words or numbers.&quot;,
	&quot;Think of it like writing down a word on a piece of paper.&quot;,
	&quot;Let&apos;s start by storing your name in a variable.&quot;,
	&quot;To make a variable, we type the word &apos;var&apos;, the name of the variable, the equals sign, and the value we want to assign to it.&quot;,
	&quot;[Tip] The keyword &apos;var&apos; shows that we want to create a new variable.&quot;,
	&quot;Try typing &apos;var x = 5&apos; and running the program.&quot;
], function() {
	waitForExecution(function() {
		return x == 5
	}, function() {
		console.log(&quot;Uh oh! Did you type &apos;var x=5&apos;?&quot;)
	}, function() {
		stepTwo()
	})
})

function stepTwo() {
	printArray([
		&quot;Nothing happened!&quot;,
		&quot;That&apos;s because we have to print out the value of the variable.&quot;,
		&quot;Try adding console.log(x)&quot;
	], function() {
		verifyOutput(&quot;5&quot;, &quot;Did you try printing the value?&quot;, stepThree)
	})
}

function stepThree() {
	printArray([
		&quot;There we go!&quot;,
		&quot;So, we can set the value of x to 5. What happens if we try to set the value again?&quot;,
		&quot;Because the variable already exists, we don&apos;t need the &apos;var&apos; keyword.&quot;,
		&quot;Try setting the value of x to a different value by typing &apos;x = 7&apos;&quot;
	], function() {
		waitForExecution(function() {
			return x == 7
		}, function() {
			console.log(&quot;Uh oh! Did you type &apos;x=7&apos;?&quot;)
		}, function() {
			stepFour()
		})
	})
}

function stepFour() {
	printArray([
		&quot;Awesome!&quot;,
		&quot;You might remember from the introduction that before, we needed quotes around text.&quot;,
		&quot;That&apos;s because there are different types of values:&quot;,
		&quot;Integers, such as the value of x, can store any round number.&quot;,
		&quot;When we want to store decimal values, we use a double. These are defined the same way as integers.&quot;,
		&quot;To store text values, we always need to write the text in quotes.&quot;,
		&quot;Text values are called Strings.&quot;,
		&quot;We can also store a string in a variable: try typing &apos;var color =\&quot;Blue\&quot;&apos;.&quot;,
		&quot;Then, print out the value of &apos;color&apos; by calling &apos;console.log(color)&apos;.&quot;
	], function() {
		verifyOutput(&quot;Blue&quot;, &quot;Did you try print the correct value?&quot;, stepFive)
	})
}

function stepFive() {
	printArray([
		&quot;Wonderful, you now know how to store values in variables.&quot;,
		&quot;To recap, we can assign different types to variables.&quot;,
		&quot;We learned about Integers, Doubles, and Strings.&quot;,
		&quot;Try making an integer variable &apos;a&apos; with the value of 10 and running the program.&quot;
	], function() {
		waitForExecution(function() {
			return a == 10
		}, function() {
			console.log(&quot;Uh oh! Did you type &apos;var a=10&apos;?&quot;)
		}, function() {
			stepSix()
		})
	})
}

function stepSix() {
	printArray([
		&quot;Now try making a double variable &apos;b&apos; with a value of 3.5 and running the program.&quot;
	], function() {
		waitForExecution(function() {
			return b == 3.5
		}, function() {
			console.log(&quot;Uh oh! Did you type &apos;var b=3.5&apos;?&quot;)
		}, function() {
			stepSeven()
		})
	})
}

function stepSeven() {
	printArray([
		&quot;Last, make a string variable &apos;c&apos; with a value of \&quot;Codie\&quot;. Don&apos;t forget the quotes!&quot;
	], function() {
		waitForExecution(function() {
			return c == &quot;Codie&quot;
		}, function() {
			console.log(&quot;Uh oh! Did you type &apos;var c=\&quot;Codie\&quot;&apos;?&quot;)
		}, function() {
			console.log(&quot;Congratulations! You have completed this lesson. âˆš&quot;)
		})
	})
}
</string>
		<key>name</key>
		<string>Varying Variables</string>
	</dict>
	<dict>
		<key>code</key>
		<string>printArray([
	&quot;Welcome back!&quot;,
	&quot;Today&apos;s topic is: Functions.&quot;,
	&quot;Imagine what secrets this lesson holds...&quot;,
	&quot;Up until now, all of our code has run straight through.&quot;,
	&quot;What if we want to store code for later, or repeat the same code?&quot;,
	&quot;We can use functions to store blocks of code.&quot;,
	&quot;A function works like this:&quot;,
	&quot;Start by typing the word function, followed its name and an open parenthesis.&quot;,
	&quot;Then, we can include the arguments of the function, which are variables we can send to the function.&quot;,
	&quot;Finally, we have a closing parenthesis and two curley brackets, where we put the code in.&quot;,
	&quot;function addFive(number) {&quot;,
	&quot;console.log(number + 5)&quot;,
	&quot;}&quot;,
	&quot;Once you have written a function, you can call it like you did console.log:&quot;,
	&quot;addFive(10)&quot;,
	&quot;Try typing in the function and calling it! I wonder what value will be printed...&quot;
], function() {
	verifyOutput(&quot;15&quot;, &quot;Hmm, not quite correct.&quot;, stepTwo)
})

function stepTwo() {
	printArray([
		&quot;Awesome! You&apos;ve written your first function.&quot;,
		&quot;What if instead, you want to get a value from a function?&quot;,
		&quot;We can pass back values in a function by using the &apos;return&apos; keyword.&quot;,
		&quot;Then, when we call the function, we can use its return value.&quot;,
		&quot;Try it out! Replace &apos;console.log(number + 5)&apos; with &apos;return number + 5&apos;&quot;,
		&quot;Then, let&apos;s make a variable &apos;x&apos; with the value plusFive(10):&quot;,
		&quot;var x = plusFive(7)&quot;,
		&quot;Finally, log the value of &apos;x&apos;.&quot;
	], function() {
		verifyOutput(&quot;12&quot;, &quot;Did you try printing the value?&quot;, stepThree)
	})
}

function stepThree() {
	printArray([
		&quot;Nice going.&quot;,
		&quot;As you saw, there are four main components of a function:&quot;,
		&quot;First, the function&apos;s name, which is used to call the function.&quot;,
		&quot;Next, the function&apos;s arguments, which allow us to pass values to the function.&quot;,
		&quot;Then, the function&apos;s code, of course, which is executed when the function is called.&quot;,
		&quot;Finally, the function&apos;s return value, which is used to pass values back to the caller of the function.&quot;,
		&quot;Putting this all together, we have the form that we saw before:&quot;,
		&quot;function [name](argument1, argument2 ... (optional)) {&quot;,
		&quot;[code]&quot;,
		&quot;return [value] (optional)&quot;,
		&quot;}&quot;,
		&quot;Let&apos;s take a look at a function you&apos;ve been using all along: console.log&quot;,
		&quot;console.log accepts one argument, the text to be logged. It&apos;s name is &apos;console.log&apos;&quot;,
		&quot;In its code, it outputs the text to the console.&quot;,
		&quot;It does not return a value.&quot;,
		&quot;Try making a function called myLog that takes two separate values and logs them both, calling separate console.log functions.&quot;,
		&quot;Then, call the function: myLog(\&quot;Hello\&quot;, \&quot;Codie\&quot;)&quot;
	], function() {
		verifyOutput(&quot;Hello\nCodie&quot;, &quot;Did you pass &apos;Hello&apos; and &apos;Codie&apos;?&quot;, stepFour)
	})
}

function stepFour() {
	printArray([
		&quot;That&apos;s a wrap for today!&quot;,
		&quot;See you during the next lesson.&quot;
	], function() {

	})
}
</string>
		<key>name</key>
		<string>Functions</string>
	</dict>
	<dict>
		<key>code</key>
		<string></string>
		<key>name</key>
		<string>If and Booleans</string>
	</dict>
	<dict>
		<key>code</key>
		<string></string>
		<key>name</key>
		<string>Variable Scopes</string>
	</dict>
	<dict>
		<key>code</key>
		<string></string>
		<key>name</key>
		<string>For and While</string>
	</dict>
</array>
</plist>
